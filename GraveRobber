local Zones = {} for i, v in pairs(workspace:GetChildren()) do     if v:FindFirstChild("Monsters") then         table.insert(Zones, v.Monsters)     end end coroutine.wrap(function()     local function ZoneGet(Zone)         while wait() do             for i, v in pairs(Zone:GetChildren()) do                 if v:IsA("Part") and v.Position.Y > (19.5 + (9.5 - v.Size.Y)) then                     local Times = tick()                     while task.wait() do if tick() - Times > 7 then break end                         if v.Position.Y > (19.5 + (9.5 - v.Size.Y)) then                             game.Players.LocalPlayer.Character:PivotTo(v.CFrame * CFrame.new(0, 5, 0))                         else                             break                         end                         end                     wait(1)                 end             end         end     end     ZoneGet(workspace.Zone1.Graves)     ZoneGet(workspace.Zone2.Graves) end)() coroutine.wrap(function()     while task.wait() do         for i, v in pairs(workspace:GetChildren()) do             if v.Name == "Bone" and v:IsA("MeshPart") then                 v.CanCollide = false                 v.CFrame = game.Players.LocalPlayer.Character:GetPivot()             end         end     end end)() coroutine.wrap(function()     while wait() do         local Temp = {}         for i, v in pairs(game.Players:GetPlayers()) do             table.insert(Temp, v.Character)         end         local raycastParams = RaycastParams.new()         raycastParams.FilterType = Enum.RaycastFilterType.Blacklist         raycastParams.FilterDescendantsInstances = Temp         local result = workspace:Raycast(game.Players.LocalPlayer.Character.Head.Position, Vector3.new(0, -200, 0), raycastParams)         if result and result.Instance.Name == "Grave" then             coroutine.wrap(function()                 game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("DigRequest"):InvokeServer(result.Instance)             end)()         end         if not tonumber(game:GetService("Players").LocalPlayer.PlayerGui.CounterGui.Frame.BoneFrame.TextLabel.Text) then             local Old = game.Players.LocalPlayer.Character:GetPivot()             game.Players.LocalPlayer.Character:PivotTo(workspace.Zone1.SpawnArea.SellArea.OuterRing.CFrame)             wait(0.5)             game.Players.LocalPlayer.Character:PivotTo(Old)         end         local KillList = {}         for i, v in pairs(Zones) do             for i, b in pairs(v:GetChildren()) do                 local Mag = (game.Players.LocalPlayer.Character:GetPivot().Position - b:GetPivot().Position).Magnitude                 if b:FindFirstChildWhichIsA("Humanoid") and Mag < 20 then                     table.insert(KillList, {b, Mag})                 end             end         end         table.sort(KillList, function(a, b)             return a[2] < b[2]         end)         for i, v in pairs(KillList) do             game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("AttackRequest"):InvokeServer(v[1])         end     end end)()
